Prompt Dettagliato per Analisi e Risoluzione del Problema nei Test Backend
**🔍 Contesto Generale:
Sto affrontando errori critici nei test automatizzati eseguiti con pytest in un progetto Flask-SQLAlchemy. I problemi principali riguardano:

Problemi di Foreign Key:

La tabella bonus_transactions non riesce a trovare il riferimento alla tabella users durante l'inizializzazione del database nei test.
Questo problema è persistente in più test.
Sequenza di Creazione delle Tabelle:

È probabile che la tabella users non venga creata prima di bonus_transactions.
Avvisi di Deprecation e Configurazione:

DeprecationWarning: Problemi con pkg_resources.declare_namespace.
SAWarning: Conflitti nei backref delle relazioni tra User.rewards e User.gold_rewards.
🎯 Obiettivo del Prompt:
Non desidero tentativi di correzioni isolate o soluzioni superficiali. Voglio:

Un'analisi completa della struttura dei modelli SQLAlchemy.
Individuare il "vero perché" che causa gli errori di Foreign Key.
Garantire che tutte le tabelle siano create nel giusto ordine.
Risolvere i conflitti nei modelli (backref e overlaps).
Iterare l'analisi e i test fino a una soluzione definitiva.
🛠️ Passaggi da Seguire:
🔄 Analisi dell'Inizializzazione del Database nei Test:

Controlla app/__init__.py per verificare come viene chiamato db.create_all() nei test.
Assicurati che la tabella users sia creata prima di bonus_transactions.
Se è presente db.drop_all(), verifica che venga eseguito correttamente prima di db.create_all().
📝 Analisi Strutturale dei Modelli:

Controlla app/models/models.py per verificare:
L'ordine di definizione delle tabelle.
Le relazioni tra User e BonusTransactions.
I ForeignKey utilizzati nelle colonne (user_id, rank_id).
Assicurati che i riferimenti siano coerenti e che non ci siano conflitti nei backref.
🔗 Relazioni nei Modelli:

Analizza attentamente le relazioni nel modello User:
python
Copia codice
user = db.relationship('User', back_populates='gold_rewards', overlaps="gold_rewards")
Risolvi eventuali conflitti con il parametro overlaps.
⚡ Analisi delle Migrazioni:

Esamina i file in migrations/versions per verificare che tutte le tabelle, in particolare users e bonus_transactions, siano correttamente migrate e create.
Assicurati che le migrazioni seguano l'ordine corretto.
🔧 Configurazione del Database nei Test:

Verifica che il database utilizzato nei test sia correttamente pulito e ricreato.
Controlla tests/conftest.py e assicurati che:
python
Copia codice
db.drop_all()
db.create_all()
db.session.commit()
vengano chiamati nell'ordine corretto.
📚 Documentazione SQLAlchemy:

Assicurati che tutte le dipendenze siano aggiornate.
Rivedi le note di rilascio di SQLAlchemy e Flask-SQLAlchemy per modifiche recenti che potrebbero influenzare il comportamento delle ForeignKey.
✅ Risultato Atteso:
Individuazione del "vero perché" dietro l'errore di Foreign Key.
Correzione definitiva dei riferimenti tra le tabelle users e bonus_transactions.
Eliminazione dei conflitti nei backref.
Database di test completamente inizializzato senza errori.
Superamento completo dei test senza errori o avvisi.