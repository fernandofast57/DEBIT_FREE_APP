### 🛠️ **Obiettivo: Ogni utente (`User`) ha un `MoneyAccount` e un `GoldAccount`**

Per raggiungere questo obiettivo in **SQLAlchemy**, dobbiamo stabilire chiaramente le relazioni tra i modelli senza conflitti nei `backref` o nei `back_populates`.

---

## ✅ **1. Modello `User`**

Ogni utente deve avere un **MoneyAccount** e un **GoldAccount**. Usiamo le relazioni uno-a-uno per entrambi.

### 📄 **`models.py` – Modello `User`**

```python
from app import db

class User(db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    
    # Relazione uno-a-uno con MoneyAccount
    money_account = db.relationship('MoneyAccount', back_populates='user', uselist=False)
    gold_account = db.relationship('GoldAccount', back_populates='user', uselist=False)
    
    def __repr__(self):
        return f"<User {self.username}>"
```

### 🔑 **Cosa Abbiamo Fatto:**
- **`money_account`**: Relazione uno-a-uno con `MoneyAccount` usando `back_populates`.
- **`gold_account`**: Relazione uno-a-uno con `GoldAccount` usando `back_populates`.
- **`uselist=False`**: Garantisce una relazione uno-a-uno invece che uno-a-molti.

---

## ✅ **2. Modello `MoneyAccount`**

### 📄 **`models.py` – Modello `MoneyAccount`**

```python
class MoneyAccount(db.Model):
    __tablename__ = 'money_accounts'
    
    id = db.Column(db.Integer, primary_key=True)
    balance = db.Column(db.Float, default=0.0)
    
    # Chiave esterna verso User
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    user = db.relationship('User', back_populates='money_account')
    
    def __repr__(self):
        return f"<MoneyAccount {self.balance}>"
```

### 🔑 **Cosa Abbiamo Fatto:**
- `user_id`: Colonna con chiave esterna che punta alla tabella `users`.
- Relazione `user`: Usa `back_populates` per collegarsi al modello `User`.

---

## ✅ **3. Modello `GoldAccount`**

### 📄 **`models.py` – Modello `GoldAccount`**

```python
class GoldAccount(db.Model):
    __tablename__ = 'gold_accounts'
    
    id = db.Column(db.Integer, primary_key=True)
    balance = db.Column(db.Float, default=0.0)
    
    # Chiave esterna verso User
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    user = db.relationship('User', back_populates='gold_account')
    
    def __repr__(self):
        return f"<GoldAccount {self.balance}>"
```

### 🔑 **Cosa Abbiamo Fatto:**
- `user_id`: Chiave esterna che punta alla tabella `users`.
- Relazione `user`: Usa `back_populates` per il collegamento inverso con `User`.

---

## ✅ **4. Creare le Migrazioni**

Se stai usando **Flask-Migrate**, esegui questi comandi per aggiornare il database:

```bash
flask db migrate -m "Add relationships for User, MoneyAccount, and GoldAccount"
flask db upgrade
```

Se non usi Flask-Migrate, puoi ricreare il database:

```bash
python
>>> from app import db
>>> db.create_all()
```

---

## ✅ **5. Test delle Relazioni**

Puoi testare nel terminale Python se le relazioni funzionano correttamente:

```python
from app import db
from app.models.models import User, MoneyAccount, GoldAccount

# Creare un utente con account associati
user = User(username='testuser', email='test@example.com', password_hash='hash123')
money_account = MoneyAccount(balance=100.0)
gold_account = GoldAccount(balance=50.0)

user.money_account = money_account
user.gold_account = gold_account

db.session.add(user)
db.session.commit()

# Verifica le relazioni
print(user.money_account.balance)  # Output: 100.0
print(user.gold_account.balance)   # Output: 50.0
```

Se tutto funziona, significa che le relazioni sono state impostate correttamente.

---

## ✅ **6. Adatta `ClientView` in Flask-Admin**

Se stai usando Flask-Admin per visualizzare queste relazioni, assicurati che il modello rifletta i nuovi collegamenti:

```python
class ClientView(SecureModelView):
    column_list = ['id', 'username', 'email', 'money_account.balance', 'gold_account.balance']
    column_searchable_list = ['username', 'email']
    column_filters = ['money_account.balance', 'gold_account.balance']
```

---

## 🚀 **7. Riavvia l'Applicazione**

```bash
python main.py
```

---

## 📊 **Cosa è Stato Risolto:**
1. Relazioni uno-a-uno chiaramente definite tra `User`, `MoneyAccount`, e `GoldAccount`.
2. Risolto il conflitto nei `backref` con l'uso di `back_populates`.
3. Adattata la vista Flask-Admin per riflettere le nuove relazioni.

Se riscontri ulteriori problemi o errori, condividili con me. 🚀