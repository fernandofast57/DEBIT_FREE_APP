import pytest
from decimal import Decimal
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import db
from app.models.models import User, MoneyAccount, GoldAccount
from app.services.gold.weekly_distribution import WeeklyGoldDistribution

@pytest.mark.asyncio
class TestWeeklyDistribution:
    @pytest.fixture
    async def distribution_service(self):
        return WeeklyGoldDistribution()

    @pytest.fixture
    async def test_user(self, test_db):
        async with db.get_async_session() as session:
            user = User(
                username='test_user',
                email='test@example.com',
                money_account=MoneyAccount(balance=Decimal('1000.00')),
                gold_account=GoldAccount(balance=Decimal('0.00'))
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
            return user

    async def test_complete_distribution_flow_with_noble_ranks(
        self,
        distribution_service, 
        test_user
    ):
        fixing_price = Decimal('1800.00')
        expected_gold_amount = Decimal('0.5185')  # (1000 * (1 - 0.067)) / 1800

        async with db.get_async_session() as session:
            result = await distribution_service.process_weekly_distribution(
                fixing_price,
                session
            )

            # Verify results
            assert result['status'] == 'success'
            assert result['total_euro'] == Decimal('1000.00')
            assert result['total_gold'] == expected_gold_amount
            assert result['users_processed'] == 1

            # Verify user balances
            await session.refresh(test_user)
            assert test_user.money_account.balance == Decimal('0')
            assert test_user.gold_account.balance == expected_gold_amount

    async def test_distribution_validation(self, distribution_service, test_user):
        invalid_cases = [
            (Decimal('-1800.00'), Decimal('1000.00'), "Invalid fixing price"),
            (Decimal('0.00'), Decimal('1000.00'), "Invalid fixing price"),
            (Decimal('1800.00'), Decimal('-1000.00'), "Invalid balance")
        ]

        async with db.get_async_session() as session:
            for fixing_price, balance, expected_error in invalid_cases:
                test_user.money_account.balance = balance
                await session.commit()

                with pytest.raises(ValueError, match=expected_error):
                    await distribution_service.process_weekly_distribution(
                        fixing_price,
                        session
                    )

    async def test_performance_under_load(
        self, 
        distribution_service,
        test_db
    ):
        user_count = 100
        async with db.get_async_session() as session:
            # Create test users
            for i in range(user_count):
                user = User(
                    username=f'testuser{i}',
                    email=f'test{i}@example.com',
                    money_account=MoneyAccount(balance=Decimal('1000.00')),
                    gold_account=GoldAccount(balance=Decimal('0.00'))
                )
                session.add(user)
            await session.commit()

            # Test distribution
            start_time = datetime.now()
            result = await distribution_service.process_weekly_distribution(
                Decimal('1800.00'),
                session
            )
            execution_time = (datetime.now() - start_time).total_seconds()

            assert result['status'] == 'success'
            assert result['users_processed'] == user_count
            assert execution_time < 10.0  # Performance threshold