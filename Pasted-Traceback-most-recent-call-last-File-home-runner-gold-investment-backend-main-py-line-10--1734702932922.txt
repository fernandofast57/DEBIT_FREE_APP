Traceback (most recent call last):
  File "/home/runner/gold-investment-backend/main.py", line 10, in <module>
    app = create_app()
          ^^^^^^^^^^^^
  File "/home/runner/gold-investment-backend/app/__init__.py", line 47, in create_app
    from app.admin import admin
  File "/home/runner/gold-investment-backend/app/admin/__init__.py", line 4, in <module>
    from app.models.models import db, User, NobleRank, Transaction
  File "/home/runner/gold-investment-backend/app/models/models.py", line 7, in <module>
    class User(db.Model):
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/model.py", line 92, in __init__
    super().__init__(name, bases, d, **kwargs)
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/model.py", line 144, in __init__
    super().__init__(name, bases, d, **kwargs)
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py", line 195, in __init__
    _as_declarative(reg, cls, dict_)
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py", line 247, in _as_declarative
    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py", line 328, in setup_mapping
    return _ClassScanMapperConfig(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py", line 563, in __init__
    self._scan_attributes()
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py", line 1006, in _scan_attributes
    collected_annotation = self._collect_annotation(
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py", line 1277, in _collect_annotation
    extracted = _extract_mapped_subtype(
                ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/gold-investment-backend/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/util.py", line 2382, in _extract_mapped_subtype
    raise sa_exc.ArgumentError(
sqlalchemy.exc.ArgumentError: Type annotation for "User.money_account" can't be correctly interpreted for Annotated Declarative Table form.  ORM annotations should normally make use of the ``Mapped[]`` generic type, or other ORM-compatible generic type, as a container for the actual type, which indicates the intent that the attribute is mapped. Class variables that are not intended to be mapped by the ORM should use ClassVar[].  To allow Annotated Declarative to disregard legacy annotations which don't use Mapped[] to pass, set "__allow_unmapped__ = True" on the class or a superclass this class. (Background on this error at: https://sqlalche.me/e/20/zlpr)